from itertools import chain
from collections import Counter
from random import choice, sample
from copy import deepcopy
from timeit import default_timer as timer
import sys
import numpy as np
sys.setrecursionlimit(5000)


class Rules:
    clauses_to_remove = list()
    literals_to_set = list()

    def __init__(self, clauses):
        self.clauses = clauses
        self.chained_clauses = list(chain.from_iterable([clause.literals for clause in self.clauses]))
        self.solved_clauses = list()

    def remove(self, clause):
        self.clauses.remove(clause)
        self.solved_clauses.append(clause)

    def append(self, clause):
        self.clauses.append(clause)

    def update(self, clauses_to_remove=clauses_to_remove):
        for clause in self.clauses:
            if clause.solved:
                clauses_to_remove.append(clause)

        for clause in clauses_to_remove:
            self.remove(clause)

        self.chained_clauses = list(chain.from_iterable([clause.literals for clause in self.clauses]))
        self.check_simplification()

    def check_simplification(self, literals_to_set=literals_to_set):
        unique_literals = list(set(self.chained_clauses))

        for literal in unique_literals:
            if -literal not in unique_literals:
                literals_to_set.append(literal)

        for clause in self.clauses:
            if len(clause.literals) == 1:
                literals_to_set.append(clause.literals[0])
            elif len(clause.literals) == 0:
                self.backtrack()

    def simplify(self, literals_to_set=literals_to_set):
        while len(literals_to_set) > 0:
            for literal in literals_to_set:
                for clause in self.clauses:
                    clause.set_literal(literal)

            self.update()

    def backtrack(self):
        pass


class Clause:
    def __init__(self, literals):
        self.literals = literals
        self.solved = self.check_tautology()
        self.clauses_set = list()

    def remove(self, literal):
        self.literals.remove(literal)

    def append(self, literal):
        self.literals.append(literal)

    def set_literal(self, literal):
        if -literal in self.literals:
            self.literals.remove(-literal)
            self.clauses_set.append(literal)
        elif literal in self.literals:
            self.solved = True
            self.clauses_set.append(literal)

    def check_tautology(self):
        for variable in self.literals:
            if -variable in self.literals:
                return True
        return False


a_clause = Clause([1, 2, -3, 3])
a_clause.append(-4)
print(a_clause.solved)
a_clause.set_literal(-4)
print(a_clause.solved)
